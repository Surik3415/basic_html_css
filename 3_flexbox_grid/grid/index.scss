
// layouts
%dashed_border_with_p_m{
  border: 3px dashed brown;
  padding: 15px;
  margin: 30px;
  text-align: center;

}


body{
  color: aqua;
  background-color: darkcyan;
  font-size: 30px;
}
.wraper {
  margin: 50px auto;
}
.grid {
  padding: 15px;
  &__body {
    display: grid;
    // зміна розміру колонки
    // це також змінює сітку, ми ніби є 6 клітинок і ми можемо зних будувати сітку
    // можна зазначати значення у пікселях, відсотках, фрагментах(fr). fr може бути дробовим, але 1 fr - це повна ширина колонки чи рядка.
    // також можна обмежувати значення мінімальним та максимальним значенням , за допомогою функції minmax. fr не може бути аргументом в minmax
    // якщо розмір колонки чи рядка зазначиний як auto, то по мірі наповнення контентом буде розширюватись елемент
    // може бути такожи значення fit-content, воно дасть розмір auto, але зазначить на скільки максимально може розширюватись елемент
    // ніколи не використовуй відсотки, бо ахуєєш фіксити
    grid-template-columns: 3fr minmax(250px, 400px) 1fr;
    // зміна розміру рядка
    grid-template-rows: 100px 200px;

    // для скорочення розміру можна скористатись функцією repeat
    //                            3 рази по 1фр
    // grid-template-columns: repeat(3,1fr);

    // для скорочення grid-template-columns та grid-template-rows можна скористатись grid-template-areas: ;

    // grid-template-areas: ;

    
  }

	&_item {
    text-align: center;
    border: 2px dashed rgb(233, 218, 218);
    padding: 30px;
  }
}

.block {
  display: grid;
  text-align: center;


  // у такому випадку елементи будуть розбиті хаотично
  // grid-template-rows: 100px 300px;
  // grid-template-columns: 150px 1fr;

  // це можна записати і ось так
  //                      ряди / колонки
  grid-template: 100px 300px / 150px 1fr;

  // ось так можна регулювати положення елементів у сітці
  grid-template-areas: 
  "header header"
  "side content";

  &__element {
    padding: 10px;
    margin: 5px 20px;
    border: 3px dashed rgb(119, 214, 9);
  }

  &__header {
    grid-area: header;
  }
  &__content {grid-area: content;}
  &__sidebar {grid-area: side;}
}

.gridb {
  margin-top: 40px;
  display: grid;
  grid-template: repeat(2, 1fr) / repeat(3, 1fr);
  // grid-auto-flow - вистраює елементи(колонки) по горизонталі, або по вертаклі, за заомвчуванняи row
  
  // ось це вистроїть елементи в рядочок (тобто розіб'є все по колонкам)
  // я так розумію, що це міняє осі грід-сітки
  // grid-auto-flow: column;

  // для вирівнювання блоку(не контенту, не кгрід клітинки) всередині елементу використовують align-items: ; and justify-items: 
  // також так можна і окремі елементи "вирівнювати" (але то треба заїбатись)
  // align-items: center;
  // justify-items: center;

  // можна робити проміжки для рядків і колонок
  // row-gap: 2px;
  // column-gap: 2px;
  // gap: 2px;


  &__element {
    &_1 {
      @extend %dashed_border_with_p_m;
      // ось так можна керувати тим, скільки місця(крядкув, колонок) займатиле елемент

      // скільки рядків забере елемент(опчаткові значення 1 та 2 за замовчуванням, типу від одного бордера до другого)
      // від першого до другого бордеру сітки
      grid-row-start: 1;
      grid-row-end: 2;

      // від 1 до 3 бордеру сітки (тоді вийде 2 рядки)
      // grid-row-start: 1;
      // grid-row-end: 3;

      // відповідно - від якого до якого бордеру буде мати колонок той чи інший елемент, по тому ж принципу
      grid-column-start: 1 ;
      grid-column-end: 3 ;

      // можна також скоротити такий запис ось таким чином
      // компактний запис
      // grid-row: 1 / 3;
      // grid-column: 1 / 2;

      // грід елементам також можна задавати ордер
      order: 1
    }
    &_2 {
      @extend %dashed_border_with_p_m;

      // ось так можна просто позиціонувати елемент
      // просто пишеш звідки маж початись якейка і він переносить старт
      grid-column-start: 3;
      grid-row-start: 2;

      background-color: yellow;
      color: black;
      order: 2;
    }
    &_3 {
      @extend %dashed_border_with_p_m;
      // ось так можна в тупу показувати скільки масця має зайняти той чи інший елемент
      grid-column-start: span 2;
      grid-row-start: span 3;
      order: 3;
    }
    &_4 {
      @extend %dashed_border_with_p_m;
      order: 4
    }
    &_5 {
      @extend %dashed_border_with_p_m;
      order: 5
    }
    &_6 {
      @extend %dashed_border_with_p_m;
      order: 6;
    }
  }
}



.gaf-block {
  background-color: #457696;
  display: grid;
  margin: 35px 0;
  gap: 5px;
  grid-auto-flow: column;
  grid-template: 150px 200px / repeat(3, 1fr);
 
  // ось так можна вистоїти елементи по якомусь краю
  // ця властивість змінює рамки блоку в середині клітинки грід
  // за замовчуванням stretch
  // justify-items: start;
  // justify-items: center;
  // align-items:end;
  // align-items: center;

  &__item1 {
    border: 3px dashed brown;  }
  &__item2 {
    border: 3px dashed brown;  }
  &__item3 {
    border: 3px dashed brown;  }
  &__item4 {
    border: 3px dashed brown;  }
  &__item5 {
    border: 3px dashed brown;  }
}
